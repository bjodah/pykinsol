========
pykinsol
========

.. image:: http://hera.physchem.kth.se:9090/api/badges/bjodah/pykinsol/status.svg
   :target: http://hera.physchem.kth.se:9090/bjodah/pykinsol
   :alt: Build status
.. image:: https://img.shields.io/pypi/v/pykinsol.svg
   :target: https://pypi.python.org/pypi/pykinsol
   :alt: PyPI version
.. image:: https://img.shields.io/pypi/l/pykinsol.svg
   :target: https://github.com/bjodah/pykinsol/blob/master/LICENSE
   :alt: License
.. image:: http://hera.physchem.kth.se/~pykinsol/branches/master/htmlcov/coverage.svg
   :target: http://hera.physchem.kth.se/~pykinsol/branches/master/htmlcov
   :alt: coverage


`pykinsol <https://github.com/bjodah/pykinsol>`_ provides a
`Python <http://www.python.org>`_ binding to the
`Nonlinear system of equation <https://en.wikipedia.org/wiki/Nonlinear_system>`_
integration routines from `kinsol <https://computation.llnl.gov/casc/sundials/description/description.html#descr_kinsol>`_ in the
`SUNDIALS suite <https://computation.llnl.gov/casc/sundials/main.html>`_. ``pykinsol`` allows a user to numerically solve
(systems of) non-linear equations.


Documentation
-------------
Autogenerated API documentation is found here: `<https://bjodah.github.com/pykinsol>`_

Installation
------------
Simplest way to install is to use the `conda package manager <http://conda.pydata.org/docs/>`_:

::

   $ conda install -c bjodah pykinsol pytest
   $ python -m pytest --pyargs pykinsol

tests should pass.

Binary distribution is available here:
`<https://anaconda.org/bjodah/pykinsol>`_

Source distribution is available here:
`<https://pypi.python.org/pypi/pykinsol>`_

Examples
--------
See `examples/ <https://github.com/bjodah/pykinsol/tree/master/examples>`_, and rendered jupyter notebooks here:
`<http://hera.physchem.kth.se/~pykinsol/branches/master/examples>`_

Here is a simple example:

.. code:: python

   >>> import numpy as np
   >>> from pykinsol import solve
   >>> mu = 1.0
   >>> def f(x, params, fout):
   ...     fout[0] = 
   ...     fout[1] = 
   ... 
   >>> def j(x, params, Jmat):
   ...     Jmat[0, 0] = 
   ...     Jmat[0, 1] = 
   ...     Jmat[1, 0] = 
   ...     Jmat[1, 1] = 
   ...
   >>> result = solve(f, j, 2, 2, [0, 1])
   >>> assert result['success']
   >>> print(result['x'])
   [ 0.83  0.13 ]

.. image:: https://raw.githubusercontent.com/bjodah/pykinsol/master/examples/van_der_pol.png


License
-------
The source code is Open Source and is released under the simplified 2-clause BSD license. See `LICENSE <LICENSE>`_ for further details.

Contributors are welcome to suggest improvements at https://github.com/bjodah/pykinsol

Author
------
Bj√∂rn I. Dahlgren, contact:

- gmail address: bjodah
- kth.se address: bda
